<!DOCTYPE html>
<!-- The lang and dir attributes will be set by JavaScript -->
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>المتجر العالمي</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <style>
        body { font-family: 'Tajawal', sans-serif; background: #212534; color: #fff; }
        .swal2-popup { font-family: 'Tajawal', sans-serif; }
        .products-grid-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 4rem 2rem; padding: 1rem; justify-items: center; }
        .card { width: 280px; height: 500px; border-radius: 25px; box-shadow: -11px 11px 1px rgba(0, 0, 0, 0.3); transition: transform 0.3s ease; cursor: pointer; }
        .card:hover { transform: scale(1.03); }
        .card-head { position: relative; height: 252px; background: linear-gradient(135deg, #fa782e 8%, #c82930 83%); border-radius: 25px 25px 0 0; display: flex; align-items: flex-start; padding: 20px; }
        .product-img { position: absolute; left: 50%; top: 45%; transform: translate(-50%, -50%) rotate(-25deg); width: 100%; max-width: 260px; filter: drop-shadow(0 30px 20px rgba(0,0,0,0.2)); }
        .product-detail { position: absolute; bottom: 20px; left: 20px; right: 20px; font-size: 12px; color: rgba(255,255,255,0.8); }
        .product-detail h2 { font-size: 20px; font-weight: 700; letter-spacing: 1px; padding-bottom: 8px; text-transform: uppercase; color: #fff; }
        .card-body { height: 248px; background: #fff; color: #333; border-radius: 0 0 25px 25px; padding: 20px; display: flex; flex-direction: column; justify-content: space-between; }
        .product-desc { padding: 5px 0; }
        .product-title { display: block; font-size: 17px; font-weight: 500; text-transform: uppercase; }
        .product-title b { font-weight: 900; }
        .product-caption { display: block; font-size: 11px; color: #888; text-transform: uppercase; margin-top: 5px; }
        .product-properties { display: flex; justify-content: space-between; align-items: center; }
        .product-price { font-size: 26px; font-weight: 700; color: #3B82F6; }
        .product-price b { font-weight: 900; }
        .cart-badge { background-color: #EF4444; color: white; border-radius: 50%; padding: 0.1em 0.5em; font-size: 0.75rem; position: absolute; top: -5px; right: -10px;}
    </style>
</head>
<body class="bg-[#212534]">

    <!-- Navbar -->
    <nav class="bg-gray-900 bg-opacity-80 shadow-lg backdrop-blur-md sticky top-0 z-40">
        <div class="container mx-auto px-4 sm:px-6 py-4">
            <div class="flex justify-between items-center">
                <div data-translate-key="store_name" class="font-bold text-xl sm:text-2xl text-white">المتجر العالمي</div>
                
                <!-- Desktop Nav Links -->
                <div class="hidden md:flex items-center space-x-4 space-x-reverse">
                    <a href="#" class="text-gray-300 hover:text-white" data-translate-key="home">الرئيسية</a>
                    <a href="#" class="text-gray-300 hover:text-white" data-translate-key="syria_lebanon_store">متجر سوريا ولبنان</a>
                    <a href="#" class="text-gray-300 hover:text-white" data-translate-key="my_wallet">محفظتي: <span id="wallet-balance" class="font-bold">...</span></a>
                    <a href="#" class="text-gray-300 hover:text-white" data-translate-key="track_orders">تتبع طلباتي</a>
                    <a href="#" class="text-gray-300 hover:text-white" data-translate-key="about_us">من نحن</a>
                    <a href="#" class="text-gray-300 hover:text-white" data-translate-key="contact_info">معلومات الاتصال</a>
                </div>

                <div class="flex items-center">
                     <!-- Cart Icon -->
                     <button id="cart-button" class="text-white text-2xl relative mx-2">
                        <i class="fas fa-shopping-cart"></i>
                        <span id="cart-count" class="cart-badge hidden">0</span>
                     </button>
                    <!-- Mobile Menu Button -->
                    <div class="md:hidden">
                        <button id="mobile-menu-button" class="text-white p-2">
                            <i class="fas fa-bars"></i>
                        </button>
                    </div>
                     <!-- Language Switcher for larger screens -->
                    <div class="hidden md:flex items-center space-x-2 space-x-reverse ml-4">
                        <button data-lang="ar" class="lang-switcher px-3 py-1 text-white hover:bg-gray-700 rounded-md">العربية</button>
                        <button data-lang="en" class="lang-switcher px-3 py-1 text-white hover:bg-gray-700 rounded-md">English</button>
                        <button data-lang="es" class="lang-switcher px-3 py-1 text-white hover:bg-gray-700 rounded-md">Español</button>
                    </div>
                     <button id="logout-button" class="hidden md:block bg-red-600 text-white px-3 py-1 rounded-md text-sm hover:bg-red-700 transition" data-translate-key="logout">تسجيل الخروج</button>
                </div>
            </div>

            <!-- Mobile Menu Dropdown -->
            <div id="mobile-menu" class="hidden md:hidden mt-4">
                <a href="#" class="block py-2 px-4 text-sm text-gray-300 hover:bg-gray-700 rounded-md" data-translate-key="home">الرئيسية</a>
                <a href="#" class="block py-2 px-4 text-sm text-gray-300 hover:bg-gray-700 rounded-md" data-translate-key="syria_lebanon_store">متجر سوريا ولبنان</a>
                <a href="#" class="block py-2 px-4 text-sm text-gray-300 hover:bg-gray-700 rounded-md" data-translate-key="my_wallet">محفظتي: <span id="wallet-balance-mobile" class="font-bold">...</span></a>
                <a href="#" class="block py-2 px-4 text-sm text-gray-300 hover:bg-gray-700 rounded-md" data-translate-key="track_orders">تتبع طلباتي</a>
                <a href="#" class="block py-2 px-4 text-sm text-gray-300 hover:bg-gray-700 rounded-md" data-translate-key="about_us">من نحن</a>
                <a href="#" class="block py-2 px-4 text-sm text-gray-300 hover:bg-gray-700 rounded-md" data-translate-key="contact_info">معلومات الاتصال</a>
                <hr class="my-2 border-gray-700">
                <div class="px-4 py-2">
                    <p class="text-gray-400 text-xs mb-2">اللغة</p>
                    <div class="flex justify-around">
                        <button data-lang="ar" class="lang-switcher px-3 py-1 text-white hover:bg-gray-700 rounded-md">العربية</button>
                        <button data-lang="en" class="lang-switcher px-3 py-1 text-white hover:bg-gray-700 rounded-md">English</button>
                        <button data-lang="es" class="lang-switcher px-3 py-1 text-white hover:bg-gray-700 rounded-md">Español</button>
                    </div>
                </div>
                 <hr class="my-2 border-gray-700">
                <button id="logout-button-mobile" class="w-full text-left py-2 px-4 text-sm text-red-400 hover:bg-gray-700 rounded-md" data-translate-key="logout">تسجيل الخروج</button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto p-4 sm:p-8">
        <h1 data-translate-key="products_title" class="text-3xl sm:text-4xl font-bold text-center text-white mb-12">منتجاتنا</h1>

        <!-- Products Grid -->
        <div id="products-grid" class="products-grid-container">
            <!-- Product cards will be inserted here by JavaScript -->
        </div>

        <!-- Loading Indicator -->
        <div id="loading-indicator" class="text-center py-10">
            <p data-translate-key="loading" class="text-gray-400">جارِ تحميل المنتجات...</p>
        </div>
    </main>

    <script src="https://npmcdn.com/parse/dist/parse.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const translations = {
            en: { store_name: "Global Store", products_title: "Our Products", loading: "Loading products...", shipping_time: "Shipping Time", add_to_cart: "Add to Cart", home: "Home", syria_lebanon_store: "Syria & Lebanon Store", my_wallet: "My Wallet:", track_orders: "Track Orders", about_us: "About Us", contact_info: "Contact Info", logout: "Logout", cart_title: "My Cart", empty_cart: "Your cart is empty.", product: "Product", price: "Price", quantity: "Quantity", total: "Total", subtotal: "Subtotal", checkout: "Checkout", pay_wallet: "Pay with Wallet", pay_paypal: "Pay with PayPal", pay_card: "Pay with Card", add_item_title: "Add to Cart", add_item_label: "Enter quantity", remove_item_title: "Are you sure?", remove_item_text: "This product will be removed from your cart!", remove_item_confirm: "Yes, delete it!", remove_item_cancel: "Cancel", item_removed_title: "Deleted!", item_removed_text: "The product has been removed from your cart." },
            ar: { store_name: "المتجر العالمي", products_title: "منتجاتنا", loading: "جارِ تحميل المنتجات...", shipping_time: "وقت الشحن", add_to_cart: "أضف إلى السلة", home: "الرئيسية", syria_lebanon_store: "متجر سوريا ولبنان", my_wallet: "محفظتي:", track_orders: "تتبع طلباتي", about_us: "من نحن", contact_info: "معلومات الاتصال", logout: "تسجيل الخروج", cart_title: "سلتي", empty_cart: "سلتك فارغة.", product: "المنتج", price: "السعر", quantity: "الكمية", total: "المجموع", subtotal: "المجموع الفرعي", checkout: "الدفع", pay_wallet: "الدفع من المحفظة", pay_paypal: "الدفع عبر PayPal", pay_card: "الدفع بالبطاقة", add_item_title: "إضافة إلى السلة", add_item_label: "أدخل الكمية", remove_item_title: "هل أنت متأكد؟", remove_item_text: "سيتم حذف هذا المنتج من سلتك!", remove_item_confirm: "نعم، احذفه!", remove_item_cancel: "إلغاء", item_removed_title: "تم الحذف!", item_removed_text: "تم حذف المنتج من السلة." },
            es: { store_name: "Tienda Global", products_title: "Nuestros Productos", loading: "Cargando productos...", shipping_time: "Tiempo de envío", add_to_cart: "Añadir a la Cesta", home: "Inicio", syria_lebanon_store: "Tienda de Siria y Líbano", my_wallet: "Mi Billetera:", track_orders: "Rastrear Pedidos", about_us: "Sobre Nosotros", contact_info: "Contacto", logout: "Cerrar Sesión", cart_title: "Mi Cesta", empty_cart: "Tu cesta está vacía.", product: "Producto", price: "Precio", quantity: "Cantidad", total: "Total", subtotal: "Subtotal", checkout: "Pagar", pay_wallet: "Pagar con Billetera", pay_paypal: "Pagar con PayPal", pay_card: "Pagar con Tarjeta", add_item_title: "Añadir a la Cesta", add_item_label: "Introduzca la cantidad", remove_item_title: "¿Estás seguro?", remove_item_text: "¡Este producto será eliminado de tu cesta!", remove_item_confirm: "¡Sí, bórralo!", remove_item_cancel: "Cancelar", item_removed_title: "¡Eliminado!", item_removed_text: "El producto ha sido eliminado de tu cesta." }
        };
        let currentLang = 'ar'; 
        Parse.initialize("a10tYxDiUFIaigtshCBuVOjYvqkUedYrS2bbwxV7", "LW1t1PMFgqMJqwiwe78vvgN9mvkxP1LuhbxGNLUY");
        Parse.serverURL = "https://parseapi.back4app.com/";
        const currentUser = Parse.User.current();

        const productsGrid = document.getElementById('products-grid');
        const loadingIndicator = document.getElementById('loading-indicator');
        const cartButton = document.getElementById('cart-button');
        const cartCountSpan = document.getElementById('cart-count');
        let productsCache = [];

        function setLanguage(lang) {
            currentLang = lang;
            document.documentElement.lang = lang;
            document.documentElement.dir = lang === 'ar' ? 'rtl' : 'ltr';
            document.querySelectorAll('[data-translate-key]').forEach(el => {
                const key = el.getAttribute('data-translate-key');
                if (!translations[lang][key]) return;
                if (key === 'my_wallet') {
                    const balanceSpan = el.querySelector('#wallet-balance, #wallet-balance-mobile');
                    el.textContent = translations[lang][key] + ' ';
                    if (balanceSpan) el.appendChild(balanceSpan);
                } else {
                    el.textContent = translations[lang][key];
                }
            });
            renderProducts(productsCache, lang);
        }

        async function fetchUserWallet() {
             try {
                const user = await currentUser.fetch();
                const balance = user.get('walletBalance') || 0;
                const formattedBalance = `$${balance.toFixed(2)}`;
                document.getElementById('wallet-balance').textContent = formattedBalance;
                document.getElementById('wallet-balance-mobile').textContent = formattedBalance;
            } catch (error) {
                console.error("Error fetching wallet:", error);
                document.getElementById('wallet-balance').textContent = '$0.00';
                document.getElementById('wallet-balance-mobile').textContent = '$0.00';
            }
        }

        async function fetchProducts() {
            loadingIndicator.style.display = 'block';
            productsGrid.innerHTML = '';
            const Product = Parse.Object.extend("Things");
            const query = new Parse.Query(Product);
            try {
                const products = await query.find();
                productsCache = products;
                renderProducts(products, currentLang);
            } catch (error) {
                console.error("Error fetching products: ", error);
                loadingIndicator.style.display = 'none';
                Swal.fire({ title: 'خطأ', html: `فشل تحميل المنتجات. تأكد من صحة مفاتيح الربط وأذونات الجدول.<br><code class="text-xs">${error.message}</code>`, icon: 'error' });
            } finally {
                loadingIndicator.style.display = 'none';
            }
        }
        
        function renderProducts(products, lang) {
            productsGrid.innerHTML = '';
            if (products.length === 0) {
                 productsGrid.innerHTML = `<p class="text-center col-span-full text-gray-400">لا توجد منتجات لعرضها حاليًا.</p>`;
                 return;
            }
            products.forEach(product => {
                const name = product.get(`name_${lang}`) || 'Product Name';
                const description = product.get(`description_${lang}`) || 'Description unavailable.';
                const category = product.get(`category_${lang}`) || 'Collection';
                const price = product.get('price') || 0;
                const shippingTime = product.get('shippingTime') || 'N/A';
                const imageFile = product.get('imageFile');
                const imageUrl = imageFile ? imageFile.url() : 'https://s5.postimg.cc/j9r8yf9gn/sws1.png';
                
                const card = document.createElement('div');
                card.className = 'card';
                card.innerHTML = `
                    <div class="card-head"> <img src="${imageUrl}" alt="${name}" class="product-img"> <div class="product-detail"> <h2>${name}</h2> ${description} </div> </div>
                    <div class="card-body"> <div class="product-desc"> <span class="product-title">${name}</span> <span class="product-caption">${category}</span> <span class="product-caption">${translations[lang].shipping_time}: ${shippingTime}</span> </div> <div class="product-properties"> <span class="product-price">$<b>${price.toFixed(2)}</b></span> <button class="add-to-cart-btn bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition" data-product-id="${product.id}"> ${translations[lang].add_to_cart} </button> </div> </div>
                `;
                card.querySelector('.add-to-cart-btn').addEventListener('click', (e) => { e.stopPropagation(); promptForQuantity(product); });
                card.addEventListener('click', () => showProductDetails(product));
                productsGrid.appendChild(card);
            });
        }
        
        async function showProductDetails(product) {
            if (!product) return;
            const name = product.get(`name_${currentLang}`);
            const description = product.get(`description_${currentLang}`);
            const price = product.get('price');
            const mainImageFile = product.get('imageFile');
            const mainImageUrl = mainImageFile ? mainImageFile.url() : '';
            const photos = product.get('photos') || [];
            const photoArray = Array.isArray(photos) ? photos : [];
            let allImages = mainImageFile ? [mainImageFile, ...photoArray] : photoArray;
            let thumbnailsHTML = '';
            allImages.forEach((imgFile) => { if (imgFile && typeof imgFile.url === 'function') { thumbnailsHTML += `<img src="${imgFile.url()}" class="w-16 h-16 object-cover cursor-pointer border-2 border-transparent hover:border-blue-500">`; }});
            const modalHTML = `<div class="flex flex-col md:flex-row gap-6"><div class="md:w-1/2"><img id="main-product-image" src="${mainImageUrl}" class="w-full rounded-lg mb-4 h-64 object-contain"><div class="flex gap-2 justify-center">${thumbnailsHTML}</div></div><div class="md:w-1/2 text-right"><h2 class="text-3xl font-bold mb-2">${name}</h2><p class="text-gray-600 mb-4">${description}</p><p class="text-3xl font-bold text-blue-600 mb-6">$${price.toFixed(2)}</p></div></div>`;
            Swal.fire({ html: modalHTML, width: '800px', showConfirmButton: false, showCloseButton: true, didOpen: () => { const mainImage = document.getElementById('main-product-image'); document.querySelectorAll('.swal2-container img.w-16').forEach(thumb => { thumb.addEventListener('click', () => { mainImage.src = thumb.src; }); }); }});
        }
        
        async function promptForQuantity(product) {
             if(!currentUser) { Swal.fire('تنبيه', 'الرجاء تسجيل الدخول أولاً لإضافة منتجات للسلة.', 'warning'); return; }
            const { value: quantity } = await Swal.fire({ title: translations[currentLang].add_item_title, input: 'number', inputLabel: translations[currentLang].add_item_label, inputValue: 1, inputAttributes: { min: 1, step: 1 }, showCancelButton: true, inputValidator: (value) => { if (!value || value < 1) { return 'الرجاء إدخال كمية صالحة!' } } });
            if (quantity) { addToCart(product, parseInt(quantity)); }
        }
        
        async function addToCart(product, quantityToAdd) {
            Swal.fire({ title: 'جارِ الإضافة...', allowOutsideClick: false, didOpen: () => { Swal.showLoading(); }});
            const Net = Parse.Object.extend("Net");
            const query = new Parse.Query(Net);
            query.equalTo("guest", currentUser);
            query.equalTo("product", product);
            try {
                let cartItem = await query.first();
                if (cartItem) {
                    cartItem.increment("quantity", quantityToAdd);
                } else {
                    cartItem = new Net();
                    cartItem.set("guest", currentUser);
                    cartItem.set("product", product);
                    cartItem.set("quantity", quantityToAdd);
                }
                await cartItem.save();
                updateCartCount();
                Swal.fire('تمت الإضافة', 'تمت إضافة المنتج إلى سلتك بنجاح!', 'success');
            } catch (error) {
                 console.error("Error adding to cart:", error);
                 let errorMessage = 'فشلت إضافة المنتج للسلة.';
                 if (error.code === 119) { errorMessage = `<strong>خطأ في الأذونات!</strong><br>الرجاء التأكد من إعدادات الأمان لجدول "Net" بشكل صحيح.`; }
                 Swal.fire({ title: 'خطأ', html: errorMessage + `<br><br><code class="text-xs text-left block" dir="ltr">${error.message}</code>`, icon: 'error' });
            }
        }
        
        async function updateCartCount() {
            if(!currentUser) return;
            const Net = Parse.Object.extend("Net");
            const query = new Parse.Query(Net);
            query.equalTo("guest", currentUser);
            try {
                const cartItems = await query.find();
                const totalItems = cartItems.reduce((sum, item) => sum + item.get('quantity'), 0);
                if(totalItems > 0) {
                    cartCountSpan.textContent = totalItems;
                    cartCountSpan.classList.remove('hidden');
                } else {
                    cartCountSpan.classList.add('hidden');
                }
            } catch (error) { console.error("Error updating cart count:", error); }
        }
        
        cartButton.addEventListener('click', async () => {
             if(!currentUser) { Swal.fire('تنبيه', 'الرجاء تسجيل الدخول أولاً لعرض السلة.', 'warning'); return; }
            showCartModal();
        });

        async function showCartModal() {
            const Net = Parse.Object.extend("Net");
            const query = new Parse.Query(Net);
            query.equalTo("guest", currentUser);
            query.include("product"); 
            Swal.fire({ title: 'جارِ تحميل السلة...', allowOutsideClick: false, didOpen: () => { Swal.showLoading(); }});
            try {
                const cartItems = await query.find();
                let subtotal = 0;
                let cartHTML;
                if (cartItems.length === 0) {
                     cartHTML = `<p class="text-center p-4">${translations[currentLang].empty_cart}</p>`;
                } else {
                    cartHTML = `<div class="max-h-64 overflow-y-auto"><table class="w-full text-sm text-left text-gray-500">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 sticky top-0"><tr>
                        <th scope="col" class="px-4 py-3">${translations[currentLang].product}</th>
                        <th scope="col" class="px-4 py-3">${translations[currentLang].quantity}</th>
                        <th scope="col" class="px-4 py-3">${translations[currentLang].total}</th>
                        <th scope="col" class="px-2 py-3"></th>
                    </tr></thead><tbody>`;
                    cartItems.forEach(item => {
                        const product = item.get("product");
                        if (!product) return;
                        const price = product.get("price") || 0;
                        const quantity = item.get("quantity");
                        const total = price * quantity;
                        subtotal += total;
                        cartHTML += `<tr class="bg-white border-b"><td class="px-6 py-4 font-medium text-gray-900">${product.get(`name_${currentLang}`)}</td><td class="px-6 py-4">${quantity}</td><td class="px-6 py-4">$${total.toFixed(2)}</td><td class="px-2 py-4 text-center"><button class="remove-from-cart-btn text-red-500 hover:text-red-700" data-cart-item-id="${item.id}"><i class="fas fa-trash-alt"></i></button></td></tr>`;
                    });
                     cartHTML += `</tbody></table></div>`;
                }
                const footerHTML = `<div class="mt-6 text-right"><p class="text-lg">${translations[currentLang].subtotal}: <span class="font-bold text-xl text-blue-600">$${subtotal.toFixed(2)}</span></p></div><div class="mt-4 border-t pt-4"><h3 class="font-bold mb-2">${translations[currentLang].checkout}</h3><div class="grid grid-cols-1 md:grid-cols-3 gap-2"><button id="pay-wallet" class="bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition">${translations[currentLang].pay_wallet}</button><button class="bg-yellow-500 text-white p-2 rounded-lg hover:bg-yellow-600 transition">${translations[currentLang].pay_paypal}</button><button class="bg-indigo-500 text-white p-2 rounded-lg hover:bg-indigo-600 transition">${translations[currentLang].pay_card}</button></div></div>`;
                Swal.fire({ title: translations[currentLang].cart_title, html: cartHTML + footerHTML, width: '800px', showConfirmButton: false, showCloseButton: true, didOpen: () => { 
                    const payWalletBtn = document.getElementById('pay-wallet'); 
                    if (payWalletBtn && cartItems.length > 0) { payWalletBtn.addEventListener('click', () => handleWalletPayment(subtotal, cartItems)); }
                    document.querySelectorAll('.remove-from-cart-btn').forEach(btn => btn.addEventListener('click', (e) => confirmRemoveFromCart(e.currentTarget.dataset.cartItemId)));
                }});
            } catch(error) {
                console.error("Error showing cart:", error);
                Swal.fire('خطأ', 'فشل عرض السلة.', 'error');
            }
        }

        async function confirmRemoveFromCart(cartItemId) {
            const result = await Swal.fire({
                title: translations[currentLang].remove_item_title,
                text: translations[currentLang].remove_item_text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: translations[currentLang].remove_item_confirm,
                cancelButtonText: translations[currentLang].remove_item_cancel
            });
            if (result.isConfirmed) {
                removeFromCart(cartItemId);
            }
        }

        async function removeFromCart(cartItemId) {
            Swal.fire({ title: 'جارِ الحذف...', allowOutsideClick: false, didOpen: () => { Swal.showLoading(); }});
            const Net = Parse.Object.extend("Net");
            const cartItem = Net.createWithoutData(cartItemId);
            try {
                await cartItem.destroy();
                updateCartCount();
                showCartModal(); // Refresh the cart modal
                Swal.close();
            } catch (error) {
                console.error("Error removing from cart:", error);
                Swal.fire('خطأ', 'فشل حذف المنتج.', 'error');
            }
        }
        
        async function handleWalletPayment(totalCost, cartItems) {
            Swal.fire({ title: 'جارِ معالجة الدفع...', allowOutsideClick: false, didOpen: () => { Swal.showLoading(); }});
            try {
                const user = await currentUser.fetch();
                const balance = user.get('walletBalance') || 0;
                if (balance < totalCost) { Swal.fire('خطأ', 'رصيدك في المحفظة غير كافٍ.', 'error'); return; }
                const newBalance = balance - totalCost;
                currentUser.set('walletBalance', newBalance);
                await currentUser.save();
                await Parse.Object.destroyAll(cartItems);
                fetchUserWallet();
                updateCartCount();
                Swal.fire('تم الدفع بنجاح!', `تم خصم $${totalCost.toFixed(2)} من محفظتك.`, 'success');
            } catch (error) {
                 console.error("Error during wallet payment:", error);
                 Swal.fire('خطأ', 'فشلت عملية الدفع.', 'error');
            }
        }

        // --- AUTH & PAGE SETUP ---
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        if(mobileMenuButton) { mobileMenuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden')); }
        
        document.querySelectorAll('.lang-switcher').forEach(s => s.addEventListener('click', e => {
            setLanguage(e.target.dataset.lang);
            if(mobileMenu) mobileMenu.classList.add('hidden');
        }));
        
        const logoutButtons = [document.getElementById('logout-button'), document.getElementById('logout-button-mobile')];
        logoutButtons.forEach(btn => btn.addEventListener('click', async () => { await Parse.User.logOut(); window.location.reload(); }));
        
        if (!currentUser) {
            logoutButtons.forEach(btn => btn.style.display = 'none');
            document.querySelector('[data-translate-key="my_wallet"]').style.display = 'none';
            document.querySelector('#mobile-menu [data-translate-key="my_wallet"]').style.display = 'none';
        } else {
            fetchUserWallet();
            updateCartCount();
        }

        setLanguage('ar');
        fetchProducts();
    });
    </script>
</body>
</html>
